<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on rookiebulls</title>
    <link>/posts/</link>
    <description>Recent content in Posts on rookiebulls</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Feb 2019 10:37:06 +0800</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Generate website with Hugo and deploy it with Travis CI</title>
      <link>/2019/generate-blog-with-hugo/</link>
      <pubDate>Sat, 23 Feb 2019 10:37:06 +0800</pubDate>
      
      <guid>/2019/generate-blog-with-hugo/</guid>
      <description>Why Hugo I used to use Pelican to generate my website, it works petty well. But in some way, it&amp;rsquo;s just not that perfect, such as, no hot reload, small community, lots of dependencies, not that fast. Hugo, in other way, is fast, nearly no dependencies, better writing experience with hot reloading, so it&amp;rsquo;s clearly a better choice for me.
Install Hugo If you are on Mac OS, you can install Hugo with Homebrew brew install hugo, for other platforms, check this link, you can find your answers here.</description>
    </item>
    
    <item>
      <title>Python call dll library</title>
      <link>/2016/python-call-cdll/</link>
      <pubDate>Thu, 08 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/python-call-cdll/</guid>
      <description>Install MingGW and gcc Install MingGW if you are using Windows, which I am. After intalling MingGW, you need to install gcc compiler. With all this done, you need to add your MingGW Bin directory to your PATH environment. Lauch cmd.exe, type &amp;ldquo;gcc -v&amp;rdquo;, you will see some information if you installed gcc successfully.
Write some code in C A simple c file.
__declspec( dllexport ) int add2(int a, int b) { return a+b; }  Do not add extern &amp;ldquo;C&amp;rdquo;, unless you are writing this in c++, otherwise there would be an error.</description>
    </item>
    
    <item>
      <title>Control serial port with pyserial</title>
      <link>/2016/pyserial/</link>
      <pubDate>Sun, 21 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/pyserial/</guid>
      <description>Install pyserail Use pip to install pyserail module.
pip install pyserial
Open serail port First of all, import pyserial module.
import pyserial
Secondly, open your serial port. If you don&amp;rsquo;t know which port you are using, you can do it like this.
def open_serialport(): PORT_NUM = 1 while True: SERIAL_PORT = &#39;COM%d&#39; % PORT_NUM try: ser = serial.Serial(port=SERIAL_PORT,baudrate=1048576,parity=&#39;N&#39;,bytesize=8,stopbits=1,timeout=0) print &amp;quot;OPEN SERIAL PORT ON %s&amp;quot; % SERIAL_PORT return ser except Exception,e: PORT_NUM = PORT_NUM + 1  Send data package In my case, I need to send binary data to a device through serail port.</description>
    </item>
    
  </channel>
</rss>